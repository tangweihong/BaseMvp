apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    flavorDimensions "default" //相当于一个标记

    //配置多渠道打包
    productFlavors {
        Taurus { dimension "default" }
    }

    lintOptions {
        // 设置为 true， 将使所有release 构建都以issus的严重性级别为fatal（severity=false）的设置来运行lint
        // 并且，如果发现了致命（fatal）的问题，将会中止构建（由abortOnError 控制）
        checkReleaseBuilds false
        // 如果为 true，则当lint发现错误时停止 gradle构建
        abortOnError false

    }
    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/notice.txt'
    }


    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            resources.srcDirs = ['src/main/java']
            aidl.srcDirs = ['src/main/java']
            renderscript.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['src/main/assets']
            jniLibs.srcDirs = ['libs']
        }
    }

    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    //获取properties
    def keystorePropertiesFile = rootProject.file("local.properties")
    def keystoreProperties = new Properties()
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

    signingConfigs {
        releaseConfig {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            v1SigningEnabled true
            v2SigningEnabled true
        }
        debugConfig {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            /* 签名类型 */
            signingConfig signingConfigs.releaseConfig
            minifyEnabled false     //是否开启混淆
            debuggable false        //是否支持调试
            zipAlignEnabled true    //是否开启zip压缩
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            signingConfig signingConfigs.releaseConfig
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    //自定义打包时apk名字
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${variant.productFlavors[0].name}_V${variant.versionName}.apk"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation rootProject.ext.dependencies.appcompat
    implementation rootProject.ext.dependencies.design
    implementation rootProject.ext.dependencies.constraintlayout
    implementation rootProject.ext.dependencies.annotation
    implementation rootProject.ext.dependencies.support
    //注解
    implementation rootProject.ext.dependencies.butterknife
    annotationProcessor rootProject.ext.dependencies.butterknifeCompiler
    //网络请求
    implementation rootProject.ext.dependencies.okhttp
    implementation rootProject.ext.dependencies.loggingInterceptor
    implementation rootProject.ext.dependencies.retrofit
    implementation rootProject.ext.dependencies.converterGson
    implementation rootProject.ext.dependencies.adapterRxjava
    implementation rootProject.ext.dependencies.gson
    //rxJava
    implementation rootProject.ext.dependencies.rxandroid
    implementation rootProject.ext.dependencies.rxjava
    //RxLifecycle2
    implementation rootProject.ext.dependencies.rxlifecycle
    implementation rootProject.ext.dependencies.rxlifecycleAndroid
    implementation rootProject.ext.dependencies.rxlifecycleComponents
    //BaseRecyclerViewAdapterHelper
    implementation rootProject.ext.dependencies.BRVAHelper
    //沉浸式状态栏
    implementation rootProject.ext.dependencies.immersionbar
    //今日头条适配方案
    implementation rootProject.ext.dependencies.autosize
    //权限申请
    implementation rootProject.ext.dependencies.permission
    implementation rootProject.ext.dependencies.rxpermissions
    //内存检测
    debugImplementation rootProject.ext.dependencies.leakcanaryAndroid
    //Glide图片加载
    implementation rootProject.ext.dependencies.glide
    implementation rootProject.ext.dependencies.glideTransformations
    annotationProcessor rootProject.ext.dependencies.glideCompiler
    //分包
    implementation rootProject.ext.dependencies.multidex
    //AgentWeb
    implementation rootProject.ext.dependencies.agentweb    // (必选)
    implementation rootProject.ext.dependencies.filechooser // (可选)
    implementation rootProject.ext.dependencies.Downloader  // (可选)
    //Zxing二维码
    implementation rootProject.ext.dependencies.zxing

    implementation rootProject.ext.dependencies.mmkv
    implementation rootProject.ext.dependencies.eventbus  
    //智能下拉刷新
    implementation rootProject.ext.dependencies.smart_kernel  //核心必须依赖
    implementation rootProject.ext.dependencies.smart_classics
    implementation rootProject.ext.dependencies.smart_material

    implementation rootProject.ext.dependencies.lombok
    annotationProcessor rootProject.ext.dependencies.lombok
    androidTestImplementation rootProject.ext.dependencies.junit
    androidTestImplementation rootProject.ext.dependencies.espresso
}
